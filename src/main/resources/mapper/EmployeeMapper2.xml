<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.metanet.persistence.EmployeeMapper2">
	
	<!-- 사원등록 -->
	<insert id="insertEmp" parameterType="com.metanet.domain.EmployeeVO2">
		INSERT INTO EMPLOYEE
		VALUES (SEQ_EMP_NO.NEXTVAL, #{posNo}, #{deptNo}, #{empName}, #{empGender}, #{empPhone}, #{empSal}, #{empEmail}, 
				TO_DATE(#{empHiredate}, 'YYYY-MM-DD'), null, #{empSsc}, #{empDegree}, #{empCareer}, #{empPwd},
				#{empRePhoto, jdbcType=VARCHAR}, #{empPhoto, jdbcType=VARCHAR}, #{empMil})
	</insert>
	
	<!-- 사원 상세정보 -->
	<select id="selectOne" resultType="com.metanet.domain.EmployeeVO2">
		select e.emp_re_photo, e.emp_photo, e.emp_no, e.emp_name, e.emp_gender, e.emp_ssc, e.emp_sal,
			   e.emp_phone, e.emp_email, to_char(emp_hiredate, 'YYYY-MM-DD') as emp_hiredate, 
			   to_char(emp_retdate, 'YYYY-MM-DD') as emp_retdate, d.dept_name, p.pos_name, 
			   e.emp_degree, e.emp_career, e.emp_mil
		from employee e, department d, position p
		where e.dept_no = d.dept_no and e.pos_no = p.pos_no and e.emp_no=#{empNo}
	</select>
	
	<!-- 사원수정(인사팀) : 비밀번호 수정X -->
	<update id="updateEmp" parameterType="com.metanet.domain.EmployeeVO2">
		update employee
		set emp_name = #{empName}, emp_gender = #{empGender}, emp_phone = #{empPhone}, emp_sal = #{empSal}, emp_email = #{empEmail}, 
			emp_hiredate = to_date(#{empHiredate}, 'YYYY-MM-DD'), emp_ssc = #{empSsc}, emp_degree = #{empDegree}, emp_career = #{empCareer}, 
			emp_re_photo = #{empRePhoto, jdbcType=VARCHAR}, emp_photo = #{empPhoto, jdbcType=VARCHAR}, emp_mil = #{empMil}
		where emp_no = #{empNo}
	</update>
	
	<!-- 사원 비밀번호 0000 으로 변경해주기(인사팀) -->
	<update id="updatePwd" parameterType="com.metanet.domain.EmployeeVO2">
		update employee
		set emp_pwd = #{empPwd}
		where emp_no = #{empNo}
	</update>
	
	<!-- 비밀번호 수정 중 현재비밀번호와 일치 확인(공통) -->
	<select id="pwCheck" resultType="String">
		select emp_pwd
		from employee
		where emp_no = #{empNo}
	</select>
	
	<!-- 비밀번호 수정(공통) -->
	<update id="pwUpdate" parameterType="com.metanet.domain.EmployeeVO2">
		update employee
		set emp_pwd = #{empPwd}
		where emp_no = #{empNo}
	</update>
	
	<!-- 부서 리스트보기(인사팀) -->
	<select id="deptList" resultType="com.metanet.domain.DepartmentVO">
		select d.dept_no, d.dept_name, d.dept_head, d.dept_date, d.dept_modify, e.emp_name
		from department d, employee e
        where d.dept_head = e.emp_no and d.dept_no > 0
		order by d.dept_no desc
	</select>
	
	<!-- 부서 추가(인사팀) -->
	<insert id="insertDept" parameterType="com.metanet.domain.DeptVO">
		insert into department
		values (seq_dept_no.nextval, #{deptName}, sysdate, null, #{empNo})
	</insert> 
	
	<!-- 부서 추가, 수정할 때 사원번호 확인하기 -->
	<select id="empNoCheck" parameterType="com.metanet.domain.EmployeeVO2" resultType="int">
		select count(*)
		from employee
		where emp_no = #{empNo} and emp_retdate is null
	</select>
	
	<!-- 부서이름, 번호 불러오기 -->
	<select id="dept" resultType="com.metanet.domain.DeptVO">
		select dept_name, dept_no
		from department
		where dept_no > 0
	</select>
	
	<!-- 부서원 상세보기 -->
	<select id="PagingSelectDept" parameterType="map" resultType="com.metanet.domain.DepartmentVO">
		<choose>
			<when test="keyField == 'empName' and keyword != null and keyword != ''">
				select * 
				from(select rownum rnum, a.*
				from (select d.dept_no, d.dept_name, d.dept_head, d.dept_date, d.dept_modify, e.emp_name, e.emp_no, e.emp_retdate
				from department d, employee e
				where e.emp_name like '%' || #{keyword} || '%'
				and d.dept_no = #{deptNo} and e.dept_no = #{deptNo}
				order by e.emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</when>
			<when test="keyField == 'empNo' and keyword != null and keyword != ''">
				select * 
				from(select rownum rnum, a.*
				from (select d.dept_no, d.dept_name, d.dept_head, d.dept_date, d.dept_modify, e.emp_name, e.emp_no, e.emp_retdate
				from department d, employee e
				where e.emp_no like '%' || #{keyword} || '%'
				and d.dept_no = #{deptNo} and e.dept_no = #{deptNo}
				order by e.emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</when>
			<otherwise>
				select *
				from(select rownum rnum, a.*
				from (select d.dept_no, d.dept_name, d.dept_head, d.dept_date, d.dept_modify, e.emp_name, e.emp_no, e.emp_retdate
				from department d, employee e
				where d.dept_no = #{deptNo} and e.dept_no = #{deptNo}
				order by emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</otherwise>
		</choose>
	</select>
	
	<select id="deptTotalCount" parameterType="Map" resultType="Integer">
		select count(*) from department d, employee e
		<choose>
			<when test="keyField == 'empName' and keyword != null and keyword != ''">
				where e.emp_name like '%' || #{keyword} || '%'
					and d.dept_no = #{deptNo} and e.dept_no = #{deptNo}
			</when>
			<when test="keyField == 'empNo' and keyword != null and keyword != ''">
				where e.emp_no like '%' || #{keyword} || '%'
					and d.dept_no = #{deptNo} and e.dept_no = #{deptNo}
			</when>
		</choose>
	</select>
	
	<!-- 부서장 상세보기 -->
	<select id="selectD" resultType="com.metanet.domain.DepartmentVO">
		select d.dept_name, e.emp_name, d.dept_no, d.dept_head
        from department d, employee e
        where d.dept_head = e.emp_no and d.dept_no = #{deptNo}
	</select>
	
	<!-- 부서 수정하기 -->
	<update id="updateDept" parameterType="com.metanet.domain.DeptVO">
		update department
		set dept_name = #{deptName}, dept_modify = sysdate, dept_head = #{empNo}
		where dept_no = #{deptNo}
	</update>
	
	<!-- 부서 삭제 전 사원들의 부서이동 -->
	<update id="empDept" parameterType="com.metanet.domain.EmployeeVO2">
		update employee
		set dept_no = 0
		where dept_no = #{deptNo}
	</update>
	
	<!-- 부서 삭제 -->
	<delete id="deleteDept" parameterType="int">
		delete 
		from department
		where dept_no = #{deptNo}
	</delete>
	
	<!-- 직급 리스트보기(인사팀) -->
	<select id="posList" resultType="com.metanet.domain.PositionVO">
		select *
		from position
		where pos_no > 0
		order by pos_no desc
	</select>
	
	<!-- 직급이름, 번호 불러오기 -->
	<select id="pos" resultType="com.metanet.domain.PositionVO">
		select pos_name, pos_no
		from position
		where pos_no > 0
	</select>
	
	<!-- 직급 추가(인사팀) -->
	<insert id="insertPos" parameterType="com.metanet.domain.PositionVO">
		insert into position
		values (seq_pos_no.nextval, #{posName}, #{posMinsal}, #{posMaxsal})
	</insert> 
	
	<!-- 직급 상세보기(연봉) -->
	<select id="selectSal" resultType="com.metanet.domain.PositionVO">
		select pos_name, pos_minsal, pos_maxsal, pos_no
        from position
        where pos_no = #{posNo}
	</select>
	
	<!-- 직급 상세보기(사원) -->
	<select id="PagingSelectPos" parameterType="map" resultType="com.metanet.domain.PositionVO">
		<choose>
			<when test="keyField == 'empName' and keyword != null and keyword != ''">
				select *
				from(select rownum rnum, a.*
				from (select e.emp_name, e.emp_no, e.emp_retdate
				from employee e, position p
				where e.emp_name like '%' || #{keyword} || '%'
				and e.pos_no = p.pos_no and p.pos_no = #{posNo} 
				order by e.emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</when>
			<when test="keyField == 'empNo' and keyword != null and keyword != ''">
				select *
				from(select rownum rnum, a.*
				from (select e.emp_name, e.emp_no, e.emp_retdate
				from employee e, position p
				where e.emp_no like '%' || #{keyword} || '%'
				and e.pos_no = p.pos_no and p.pos_no = #{posNo} 
				order by e.emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</when>
			<otherwise>
				select *
				from(select rownum rnum, a.*
				from (select e.emp_name, e.emp_no, e.emp_retdate
				from employee e, position p
				where e.pos_no = p.pos_no and p.pos_no = #{posNo} 
				order by emp_no desc) a )
				where rnum between #{startNum} and #{endNum}
			</otherwise>
		</choose>
	</select>
	
	<select id="posTotalCount" parameterType="Map" resultType="Integer">
		select count(*) from employee e, position p
		<choose>
			<when test="keyField == 'empName' and keyword != null and keyword != ''">
				where e.emp_name like '%' || #{keyword} || '%'
					and e.pos_no = p.pos_no and p.pos_no = #{posNo} 
			</when>
			<when test="keyField == 'empNo' and keyword != null and keyword != ''">
				where e.emp_no like '%' || #{keyword} || '%'
					and e.pos_no = p.pos_no and p.pos_no = #{posNo} 
			</when>
		</choose>
	</select>
	
	<!-- 직급 수정하기(인사팀) -->
	<update id="updatePos" parameterType="com.metanet.domain.PositionVO">
		update position
		set pos_name = #{posName}, pos_minsal = #{posMinsal}, pos_maxsal = #{posMaxsal}
		where pos_no = #{posNo}
	</update>
	
	<!-- 직급 삭제 전 사원들의 직급이동 -->
	<update id="empPos" parameterType="com.metanet.domain.EmployeeVO2">
		update employee
		set pos_no = 0
		where pos_no = #{posNo}
	</update>
	
	<!-- 직급 삭제 -->
	<delete id="deletePos" parameterType="int">
		delete 
		from position
		where pos_no = #{posNo}
	</delete>
</mapper>